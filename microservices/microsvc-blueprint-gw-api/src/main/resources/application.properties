# --- common variables ---
server.port=9030
spring.jmx.enabled=true
# --- api specific variables ---

# --- datadog agent variables ---

# --- micrometer-datadog variables ---
management.metrics.web.server.request.autotime.enabled=true
management.endpoints.web.exposure.include=info,health,metrics,configprops,env,jolokia
management.metrics.export.datadog.enabled=true
management.metrics.export.datadog.api-key=xpto
management.metrics.export.datadog.uri=https://api.datadoghq.eu
management.metrics.export.datadog.step=30s
# --- metric tags ---
management.metrics.tags.team=tgedr
management.metrics.tags.project=microsvc-blueprint
management.metrics.tags.api=gw
# --- solver variables ---
solver.uri=http://solver-service.default.svc.cluster.local/api/problem
# --- store variables ---
amazon.dynamodb.endpoint=http://store-service.default.svc.cluster.local:8000
amazon.aws.accesskey=test1
amazon.aws.secretkey=test231
spring.data.dynamodb.entity2ddl.auto=create
spring.data.dynamodb.entity2ddl.gsiProjectionType=ALL
spring.data.dynamodb.entity2ddl.readCapacity=10
spring.data.dynamodb.entity2ddl.writeCapacity=1
# --- rate limiting ---
spring.cache.jcache.config=classpath:ehcache.xml
bucket4j.enabled=true 
bucket4j.filters[0].filter-method=servlet
bucket4j.filters[0].cache-name=ratelimit # the name of the cache key
bucket4j.filters[0].url=.* # a regular expression
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=100
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=seconds
bucket4j.filters[0].metrics.tags[0].key=IP
bucket4j.filters[0].metrics.tags[0].expression=getRemoteAddr()
bucket4j.filters[0].metrics.tags[1].key=URL
bucket4j.filters[0].metrics.tags[1].expression=getRequestURI()
bucket4j.filters[1].filter-method=servlet
bucket4j.filters[1].cache-name=ratelimit # the name of the cache key
bucket4j.filters[1].url=.* # a regular expression
bucket4j.filters[1].rate-limits[0].bandwidths[0].capacity=100
bucket4j.filters[1].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[1].rate-limits[0].bandwidths[0].unit=seconds
bucket4j.filters[1].metrics.tags[0].key=IP
bucket4j.filters[1].metrics.tags[0].expression=getRemoteAddr()
bucket4j.filters[1].metrics.tags[1].key=URL
bucket4j.filters[1].metrics.tags[1].expression=getRequestURI()







